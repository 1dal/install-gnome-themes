#!/bin/bash

#
# This script installs the latest versions of some fine GNOME themes into the current user's ".themes" folder.
#
# Get the most recent version of this script at:
#
#     https://github.com/tliron/install-gnome-themes
#
# Copyright 2016 by Tal Liron. MIT-style license:
#
#     https://github.com/tliron/install-gnome-themes/blob/master/LICENSE
#

set -e

#
# Build output is supressed by default. If you want to see it, set the LOG environment var:
#
# 	LOG=/dev/stdout ./install-gnome-themes
#
# Or:
#
# 	LOG=output.log ./install-gnome-themes
#

RED='\033[0;31m'
RESET='\033[0m'
THEMES=~/.themes
LOG=${LOG:-/dev/null}

#
# Preparation
#

function write()
{
	echo -e "${RED}$1$RESET"
	if [ "$LOG" != '/dev/stdout' ]; then
		echo "$1" >> "$LOG"
	fi
}

GNOME_VERSION=$(gnome-shell --version | cut -d ' ' -f3 | cut -d '.' -f1,2)

if [ "$GNOME_VERSION" != '3.20' ] && [ "$GNOME_VERSION" != '3.18' ]; then
	write 'This script only supports GNOME 3.20 and GNOME 3.18.'
	exit 1
fi

write "Detected GNOME $GNOME_VERSION."

OS=$(lsb_release -si)

write "Detected $OS operating system."

write "Verifying that build requirements are installed..."

if [ "$OS" == 'Ubuntu' ] || [ "$OS" == 'Debian' ]; then
	# Ubuntu GNOME comes with Numix (for 3.18) preinstalled, we will remove it to avoid confusion
	sudo apt remove numix-gtk-theme
	# Install our build and usage requirements
	sudo apt install \
		git autoconf automake pkg-config \
		libgtk-3-dev libglib2.0-dev libxml2-utils libglib2.0-bin libgdk-pixbuf2.0-dev \
		gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf \
		ruby ruby-bundler \
		inkscape \
		fonts-roboto
else
	write 'This script only supports Ubuntu and Debian.'
	exit 1
fi

# SASS is used by many themes to generate CSS
sudo gem install sass

mkdir -p "$THEMES"

#
# Utilities
#

function timestamp()
{
	git log -1 --date=short --pretty=format:%cd
}

function prepare()
{
	write "Fetching latest version of $4..."
	cleanup "$2"
	cd /tmp
	# Shallow git clone is faster
	git clone "https://github.com/$1/$2" -b "$3" --depth 1 &>> "$LOG"
	cd "$2"
	write "Building and installing $4, last updated on $(timestamp)..."
	rm -rf "$THEMES/$4"*
}

function cleanup()
{
	rm -rf "/tmp/$1"
}

function theme-cp()
{
	prepare "$@"
	cp -r "$4" "$THEMES/"
	cleanup "$2"
}

function theme-cp-all()
{
	prepare "$@"
	cp -r "$4"* "$THEMES/"
	cleanup "$2"
}

function theme-make()
{
	prepare "$@"
	make install INSTALL_DIR="$THEMES/$4" &>> "$LOG"
	cleanup "$2"
}

function theme-autogen-prefix()
{
	prepare "$@"
	./autogen.sh --prefix=$(pwd) "${@:5}" &>> "$LOG"
	make &>> "$LOG"
	# Adapta needs to run "make install" separately
	make install &>> "$LOG"
	cp -r share/themes/* "$THEMES/"
	cleanup "$2"
}

function theme-autogen-destdir()
{
	prepare "$@"
	./autogen.sh "${@:5}" &>> "$LOG"
	make install DESTDIR=$(pwd) &>> "$LOG"
	cp -r usr/share/themes/* "$THEMES/"
	cleanup "$2"
}

#
# Themes
#

# Adapta
# https://github.com/tista500/Adapta
# Requirements: autoconf automake pkg-config libglib-2.0-dev libxml2-utils inkscape gtk2-engines-murrine gtk2-engines-pixbuf sass bundler
#
# Supports configurations settings, e.g. a variant with colors red500, red300, bluegrey300, bluegrey500:
#
#	ADAPTA_ARGS=' \
#		--with-selection_color=#F44336 \
#		--with-second_selection_color=#E57373 \
#		--with-accent_color=#90A4AE \
#		--with-suggestion_color=#607D8B' \
#	./install-gnome-themes
write "WARNING: Installing Adapta takes an especially long time, please be patient!"
theme-autogen-prefix tista500 Adapta master Adapta $ADAPTA_ARGS

# Arc
# https://github.com/horst3180/arc-theme
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
#
# Supports configurations settings, e.g. a variant with transparency disabled:
#
#	ARC_ARGS=' \
#		--disable-transparency' \
#	./install-gnome-themes
theme-autogen-prefix horst3180 arc-theme master Arc $ARC_ARGS

# Breeze
# https://github.com/dirruk1/gnome-breeze
# Requirements: gtk2-engines-pixbuf
theme-cp-all dirruk1 gnome-breeze master Breeze

# Candra
# https://github.com/killhellokitty/Candra-Themes-3.20
# Requirements: gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp-all killhellokitty Candra-Themes-3.20 master Candra-Theme-3.20
fi

# Ceti-2
# https://github.com/horst3180/ceti-2-theme
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
if [ "$GNOME_VERSION" = '3.18' ]; then
	theme-autogen-prefix horst3180 ceti-2-theme master Ceti-2
fi

# Cloak
# https://github.com/killhellokitty/Cloak-3.20
# Requirements: gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp-all killhellokitty Cloak-3.20 master Cloak-3.20
fi

# Delorean Dark
# https://github.com/killhellokitty/DeLorean-Dark-3.18
# Requirements: gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf
if [ "$GNOME_VERSION" = '3.18' ]; then
	theme-cp killhellokitty DeLorean-Dark-3.18 master DeLorean-Dark-3.18
fi

# EvoPop
# https://github.com/solus-cold-storage/evopop-gtk-theme
theme-autogen-destdir solus-cold-storage evopop-gtk-theme master evopop

# Numix
# https://github.com/numixproject/numix-gtk-theme
# Requirements: automake libglib2.0-bin libgdk-pixbuf2.0-dev sass
theme-make numixproject numix-gtk-theme master Numix

# Paper
# https://github.com/snwh/paper-gtk-theme
# Requirements: automake automake
theme-autogen-destdir snwh paper-gtk-theme master Paper

# Vertex
# https://github.com/horst3180/vertex-theme
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
theme-autogen-prefix horst3180 vertex-theme master Vertex

# Zuki
# https://github.com/lassekongo83/zuki-themes
# Requirements: gtk2-engines-murrine gtk2-engines-pixbuf fonts-roboto
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp-all lassekongo83 zuki-themes master Zuki
elif [ "$GNOME_VERSION" = '3.18' ]; then
	theme-cp-all lassekongo83 zuki-themes 3.18 Zuki
fi

write "Done!"
