#!/bin/bash

#
# This script installs the latest versions of some fine GNOME themes into the current user's ".themes" folder.
#
# Get the most recent version of this script at:
#
#     https://github.com/tliron/install-gnome-themes
#
# Copyright 2016 by Tal Liron. MIT-style license:
#
#     https://github.com/tliron/install-gnome-themes/blob/master/LICENSE
#

set -e

#
# To skip installation of requirements:
#
# 	REQUIREMENTS=0 ./install-gnome-themes
#
# Build output is supressed by default. If you want to see it, set the LOG environment var:
#
# 	LOG=/dev/stdout ./install-gnome-themes
#
# Or:
#
# 	LOG=output.log ./install-gnome-themes
#

RED='\033[0;31m'
RESET='\033[0m'
LOG=${LOG:-/dev/null}
REQUIREMENTS=${REQUIREMENTS:-1}
THEMES=~/.themes
CACHE_FILE=${CACHE_FILE:-$THEMES/.install-gnome-themes-cache}

#
# Preparation
#

function write()
{
	echo -e "${RED}$@$RESET"
	if [ "$LOG" != '/dev/stdout' ]; then
		echo "$1" >> "$LOG"
	fi
}

GNOME_VERSION=$(gnome-shell --version | cut -d ' ' -f3 | cut -d '.' -f1,2)

if [ "$GNOME_VERSION" != '3.20' ] && [ "$GNOME_VERSION" != '3.18' ]; then
	write 'This script only supports GNOME 3.20 and GNOME 3.18.'
	exit 1
fi

write "Detected GNOME $GNOME_VERSION."

OS=$(lsb_release -si)

write "Detected $OS operating system."

if [ "$REQUIREMENTS" == 1 ]; then
	write "Verifying that build requirements are installed..."

	if [ "$OS" == 'Ubuntu' ] || [ "$OS" == 'Debian' ]; then
		# Ubuntu GNOME comes with Numix (for 3.18) preinstalled, we will remove it to avoid confusion
		sudo apt remove numix-gtk-theme
		# Install our build and usage requirements
		sudo apt install \
			git autoconf automake pkg-config \
			libgtk-3-dev libglib2.0-dev libxml2-utils libglib2.0-bin libgdk-pixbuf2.0-dev \
			gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf \
			ruby ruby-bundler \
			inkscape \
			fonts-roboto
	else
		write 'This script only supports Ubuntu and Debian.'
		exit 1
	fi

	# SASS is used by many themes to generate CSS
	sudo gem install sass
fi

mkdir -p "$THEMES"

#
# Utilities
#

function repository-timestamp()
{
	git log -1 --date=short --pretty=format:%cr
}

function repository-id()
{
	git log -1 --pretty=format:%H
}

function get-value()
{
	if [ -f "$2" ]; then
		sed --quiet "s/^$1 \(.*\)/\1/p" "$2"
	fi
}

function set-value()
{
	if grep --quiet --no-messages "^$1 " "$3"; then
		sed --in-place "s/^\($1 \)\(.*\)/\1$2/" "$3"
	else
		echo "$1 $2" >> "$3"
	fi
}

function comma-separated()
{
	local R
	for A in "$@"; do
		if [ -z "$R" ]; then
			R=$1
		else
			R="$R, $A"
		fi
	done
	echo $R
}

function prepare()
{
	local NAMES=$(comma-separated "${@:4}")
	write "Checking repository for: $NAMES..."

	# Shallow git clone
	cleanup "$2"
	cd /tmp
	git clone "https://github.com/$1/$2" -b "$3" --depth 1 &>> "$LOG"
	cd "/tmp/$2"

	local KEY="$1|$2|$3"
	local CURRENT_ID=$(repository-id)
	local LAST_ID=$(get-value "$KEY" "$CACHE_FILE")

	if [ "$CURRENT_ID" == "$LAST_ID" ]; then
		write "Latest version already installed, last updated $(repository-timestamp)."
		cleanup "$2"
		return 1
	else
		write "Installing new version, last updated $(repository-timestamp)..."
		set-value "$KEY" "$CURRENT_ID" "$CACHE_FILE"
		cd "$THEMES"
		rm -rf "${@:4}"
		cd "/tmp/$2"
		return 0
	fi
}

function cleanup()
{
	rm -rf "/tmp/$1"
}

function theme-cp()
{
	if ! prepare "$@"; then
		return
	fi
	cp -r "${@:4}" "$THEMES/"
	cleanup "$2"
}

function theme-mv()
{
	if ! prepare "$@"; then
		return
	fi
	cd ..
	mv "$2" "$THEMES/$4"
	cleanup "$2"
}

function theme-make()
{
	if ! prepare "$@"; then
		return
	fi
	make install INSTALL_DIR="$THEMES/$4" &>> "$LOG"
	cleanup "$2"
}

function theme-autogen-prefix()
{
	if ! prepare "$@"; then
		return
	fi
	./autogen.sh --prefix=$(pwd) $AUTOGEN_ARGS &>> "$LOG"
	make &>> "$LOG"
	# Adapta needs to run "make install" separately
	make install &>> "$LOG"
	cp -r share/themes/* "$THEMES/"
	cleanup "$2"
}

function theme-autogen-destdir()
{
	if ! prepare "$@"; then
		return
	fi
	./autogen.sh $AUTOGEN_ARGS &>> "$LOG"
	make install DESTDIR=$(pwd) &>> "$LOG"
	cp -r usr/share/themes/* "$THEMES/"
	cleanup "$2"
}

#
# Themes
#

# Adapta
# https://github.com/tista500/Adapta
# Requirements: autoconf automake pkg-config libglib-2.0-dev libxml2-utils inkscape gtk2-engines-murrine gtk2-engines-pixbuf sass bundler
#
# Supports configurations settings, e.g. a variant with colors red500, red300, bluegrey300, bluegrey500:
#
#	ADAPTA_ARGS='
#		--with-selection_color=#F44336
#		--with-second_selection_color=#E57373
#		--with-accent_color=#90A4AE
#		--with-suggestion_color=#607D8B' \
#	./install-gnome-themes
write "WARNING: Installing Adapta takes an especially long time due to rendering of all assets, please be patient!"
AUTOGEN_ARGS=$ADAPTA_ARGS \
theme-autogen-prefix tista500 Adapta master Adapta Adapta-Eta Adapta-Nokto Adapta-Nokto-Eta

# Arc
# https://github.com/horst3180/arc-theme
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
#
# Supports configurations settings, e.g. a variant with transparency disabled:
#
#	ARC_ARGS='
#		--disable-transparency' \
#	./install-gnome-themes
AUTOGEN_ARGS=$ARC_ARGS \
theme-autogen-prefix horst3180 arc-theme master Arc Arc-Dark Arc-Darker

# Arc-Red
# https://github.com/mclmza/arc-theme-Red
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
#
# Supports configurations settings, e.g. a variant with transparency disabled:
#
#       ARC_RED_ARGS='
#               --disable-transparency' \
#       ./install-gnome-themes
AUTOGEN_ARGS=$ARC_RED_ARGS \
theme-autogen-prefix mclmza arc-theme-Red master Arc-Red Arc-Red-Dark Arc-Red-Darker

# Breeze
# https://github.com/dirruk1/gnome-breeze
# Requirements: gtk2-engines-pixbuf
theme-cp dirruk1 gnome-breeze master Breeze-gtk Breeze-dark-gtk

# Candra
# https://github.com/killhellokitty/Candra-Themes-3.20
# Requirements: gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp killhellokitty Candra-Themes-3.20 master Candra-Theme-3.20 Candra-Theme-3.20-Dark Candra-Theme-3.20-Darker
fi

# Ceti-2
# https://github.com/horst3180/ceti-2-theme
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
if [ "$GNOME_VERSION" = '3.18' ]; then
	theme-autogen-prefix horst3180 ceti-2-theme master Ceti-2
fi

# Chrome-OS
# https://github.com/Elbullazul/Chrome-OS
if [ "$GNOME_VERSION" = '3.18' ]; then
	theme-mv Elbullazul Chrome-OS master Chrome-OS
fi

# Cloak
# https://github.com/killhellokitty/Cloak-3.20
# Requirements: gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp killhellokitty Cloak-3.20 master Cloak-3.20
fi

# Delorean Dark
# https://github.com/killhellokitty/DeLorean-Dark-3.18
# Requirements: gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf
if [ "$GNOME_VERSION" = '3.18' ]; then
	theme-cp killhellokitty DeLorean-Dark-3.18 master DeLorean-Dark-3.18
fi

# EvoPop
# https://github.com/solus-cold-storage/evopop-gtk-theme
theme-autogen-destdir solus-cold-storage evopop-gtk-theme master evopop

# Flat-Plat
# https://github.com/nana-4/Flat-Plat
theme-mv nana-4 Flat-Plat master Flat-Plat

# Fresh-Finesse
# https://github.com/Vistaus/Fresh-Finesse
theme-cp Vistaus Fresh-Finesse master Fresh-Finesse 

# Greybird
# https://github.com/shimmerproject/Greybird
# Requirements: autoconf automake libgdk-pixbuf2.0-dev libglib2.0-bin sass
theme-autogen-prefix shimmerproject Greybird master Greybird Greybird-bright Greybird-compact Greybird-accessibility

# macOS-Sierra
# https://github.com/Elbullazul/macOS-Sierra
theme-mv Elbullazul macOS-Sierra master macOS-Sierra

# Numix
# https://github.com/numixproject/numix-gtk-theme
# Requirements: automake libglib2.0-bin libgdk-pixbuf2.0-dev sass
theme-make numixproject numix-gtk-theme master Numix

# Paper
# https://github.com/snwh/paper-gtk-theme
# Requirements: automake automake
theme-autogen-destdir snwh paper-gtk-theme master Paper

# Redmond-Themes
# https://github.com/Elbullazul/Redmond-Themes
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp Elbullazul Redmond-Themes master "Windows 3.x" "Windows 9x"
elif [ "$GNOME_VERSION" = '3.18' ]; then
	theme-cp Elbullazul Redmond-Themes master "Windows 3.x" "Windows 9x" "Windows XP Embedded" "Windows XP Zune" "Windows Vista"
fi

# Vertex
# https://github.com/horst3180/vertex-theme
# Requirements: autoconf automake pkg-config libgtk-3-dev gtk2-engines-murrine
theme-autogen-prefix horst3180 vertex-theme master Vertex Vertex-Light Vertex-Dark

# Windows-10
# https://github.com/Elbullazul/Windows-10
theme-cp Elbullazul Windows-10 master "Windows 10 Light" "Windows 10 Dark"

# Zuki
# https://github.com/lassekongo83/zuki-themes
# Requirements: gtk2-engines-murrine gtk2-engines-pixbuf fonts-roboto
if [ "$GNOME_VERSION" = '3.20' ]; then
	theme-cp lassekongo83 zuki-themes master Zukitre Zukitwo Zuki-shell
elif [ "$GNOME_VERSION" = '3.18' ]; then
	theme-cp lassekongo83 zuki-themes 3.18 Zukitre Zukitwo Zuki-shell
fi

write "Done!"
